{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "engineeringVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": "10.0.0.0/18",
        "Tags": [
          {
            "Key": "Environment",
            "Value": "Test"
          }
        ]
      }
    },
    "publicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "engineeringVpc"
        },
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone" : "us-east-1a"
      }
    },
    "publicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "engineeringVpc"
        },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone" : "us-east-1b"
      }
    },
    "web1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": "ami-3ea13f29",
	"KeyName" : "webserver",
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "webserverSG"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "publicSubnet1"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "web1"
          }
        ]
      },
      "DependsOn": [
        "PublicRoute"
      ]
    },
    "web2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": "ami-3ea13f29",
	"KeyName" : "webserver",
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "webserverSG"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "publicSubnet2"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "web2"
          }
        ]
      },
      "DependsOn": [
        "PublicRoute"
      ]
     },
     "engineeringLB": {
       "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
       "Properties": {
         "Subnets": [ {"Ref": "publicSubnet1"}, {"Ref": "publicSubnet2"}],
	 "Name": "engineeringLB",
	 "SecurityGroups": [ {"Ref": "webserverSG"}]
       }
     },
     "Listener": {
	"Type": "AWS::ElasticLoadBalancingV2::Listener",
	"Properties": {
	  "DefaultActions": [{
	    "Type": "forward",
	    "TargetGroupArn": {"Ref": "engineeringWebservers"}
	  }],
	  "LoadBalancerArn": {"Ref": "engineeringLB"},
	  "Port": "80",
	  "Protocol": "HTTP"
	}
      },
      "webserverSG": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "VpcId": {
            "Ref": "engineeringVpc"
          },
        "GroupDescription": "Allow access from HTTP and SSH traffic",
        "SecurityGroupEgress": [{
	    "IpProtocol": "-1",
	    "CidrIp": "0.0.0.0/0"
	}],
	"SecurityGroupIngress": [{
            "IpProtocol": "TCP",
	    "CidrIp": {"Ref": "YourIp"},
            "FromPort": "22",
            "ToPort": "22"
        },
	{
	    "IpProtocol": "TCP",
	    "CidrIp": "0.0.0.0/0",
	    "FromPort": "80",
	    "ToPort": "80"
        }]
      }
    },
    "engineeringWebservers": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/",
        "HealthCheckPort": "80",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 4,
        "Matcher": {
          "HttpCode": "200"
        },
        "Name": "webserverTargets",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [{
          "Key": "deregistration_delay.timeout_seconds",
          "Value": "20"
        }],
        "Targets": [
          { "Id": {"Ref": "web1"}, "Port": 80 },
          { "Id": {"Ref": "web2"}, "Port": 80 }
        ],
        "UnhealthyThresholdCount": 3,
        "VpcId": {"Ref": "engineeringVpc"}
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },
    "EC2VPCG509RW": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "engineeringVpc"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "engineeringVpc"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": [
        "InternetGateway"
      ]
    },
    "publicSubnet1RTassoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "publicSubnet1"
        }
      }
    },
    "publicSubnet2RTassoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "publicSubnet2"
        }
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "Description": "Server instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small"
      ],
      "ConstraintDescription": "Must be a valid EC2 type."
    },
    "KeyName": {
      "Description": "Name of your EC2 KeyPair to enable SSH access to the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "YourIp": {
      "Description": "The current CIDR IP address of your workstation (x.x.x.x/32).",
      "Type": "String"
    }
  },
  "Outputs": {
    "weburl": {
      "Description": "DNS name of  load balancer",
      "Value": { "Fn::GetAtt": ["engineeringLB", "DNSName"]}
     }
   }
}
